/*
 * Copyright 2017 Abed Tony BenBrahim <tony.benrahim@10xdev.com>
 *     and Gwt-JElement project contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
[Constructor(unsigned long length)]
interface ArrayBuffer {
  readonly attribute unsigned long byteLength;
  ArrayBuffer slice(long begin, optional long end);
  static boolean isView(any value);
};
ArrayBuffer implements Transferable;

[NoInterfaceObject]
interface ArrayBufferView {
  readonly attribute ArrayBuffer buffer;
  readonly attribute unsigned long byteOffset;
  readonly attribute unsigned long byteLength;
};

[
 Constructor(unsigned long length),
 Constructor(Int8Array array),
 Constructor(sequence<byte> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
] interface Int8Array: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 1;
  readonly attribute unsigned long length;
  getter byte (unsigned long index);
  setter void (unsigned long index, byte value);
  void set(Int8Array array, optional unsigned long offset);
  void set(sequence<byte> array, optional unsigned long offset);
  Int8Array subarray(long begin, optional long end);
};

[
 Constructor(unsigned long length),
 Constructor(Uint8Array array),
 Constructor(sequence<octet> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
]
interface Uint8Array: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 1;
  readonly attribute unsigned long length;
  getter octet (unsigned long index);
  setter void (unsigned long index, octet value);
  void set(Uint8Array array, optional unsigned long offset);
  void set(sequence<octet> array, optional unsigned long offset);
  Uint8Array subarray(long begin, optional long end);
};

[
 Constructor(unsigned long length),
 Constructor(Uint8ClampedArray array),
 Constructor(sequence<octet> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
]
interface Uint8ClampedArray: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 1;
  readonly attribute unsigned long length;
  getter octet (unsigned long index);
  setter void (unsigned long index, [Clamp] octet value);
  void set(Uint8ClampedArray array, optional unsigned long offset);
  void set(sequence<octet> array, optional unsigned long offset);
  Uint8ClampedArray subarray(long begin, optional long end);
};

[
 Constructor(unsigned long length),
 Constructor(Int16Array array),
 Constructor(sequence<short> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
]
interface Int16Array: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 2;
  readonly attribute unsigned long length;
  getter short (unsigned long index);
  setter void (unsigned long index, short value);
  void set(Int16Array array, optional unsigned long offset);
  void set(sequence<short> array, optional unsigned long offset);
  Int16Array subarray(long begin, optional long end);
};

[
 Constructor(unsigned long length),
 Constructor(Uint16Array array),
 Constructor(sequence<unsigned short> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
]
interface Uint16Array: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 2;
  readonly attribute unsigned long length;
  getter unsigned short (unsigned long index);
  setter void (unsigned long index, unsigned short value);
  void set(Uint16Array array, optional unsigned long offset);
  void set(sequence<unsigned short> array, optional unsigned long offset);
  Uint16Array subarray(long begin, optional long end);
};

[
 Constructor(unsigned long length),
 Constructor(Int32Array array),
 Constructor(sequence<long> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
]
interface Int32Array: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 4;
  readonly attribute unsigned long length;
  getter long (unsigned long index);
  setter void (unsigned long index, long value);
  void set(Int32Array array, optional unsigned long offset);
  void set(sequence<long> array, optional unsigned long offset);
  Int32Array subarray(long begin, optional long end);
};

[
 Constructor(unsigned long length),
 Constructor(Uint32Array array),
 Constructor(sequence<unsigned long> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
]
interface Uint32Array: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 4;
  readonly attribute unsigned long length;
  getter unsigned long (unsigned long index);
  setter void (unsigned long index, unsigned long value);
  void set(Uint32Array array, optional unsigned long offset);
  void set(sequence<unsigned long> array, optional unsigned long offset);
  Uint32Array subarray(long begin, optional long end);
};

[
 Constructor(unsigned long length),
 Constructor(Float32Array array),
 Constructor(sequence<float> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
]
interface Float32Array: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 4;
  readonly attribute unsigned long length;
  getter unrestricted float (unsigned long index);
  setter void (unsigned long index, unrestricted float value);
  void set(Float32Array array, optional unsigned long offset);
  void set(sequence<unrestricted float> array, optional unsigned long offset);
  Float32Array subarray(long begin, optional long end);
};

[
 Constructor(unsigned long length),
 Constructor(Float64Array array),
 Constructor(sequence<double> array),
 Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length)
]
interface Float64Array: ArrayBufferView {
  const unsigned long BYTES_PER_ELEMENT = 8;
  readonly attribute unsigned long length;
  getter unrestricted double (unsigned long index);
  setter void (unsigned long index, unrestricted double value);
  void set(Float64Array array, optional unsigned long offset);
  void set(sequence<unrestricted double> array, optional unsigned long offset);
  Float64Array subarray(long begin, optional long end);
};

[Constructor(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long byteLength)]
interface DataView: ArrayBufferView {
  byte getInt8(unsigned long byteOffset);
  octet getUint8(unsigned long byteOffset);
  short getInt16(unsigned long byteOffset, optional boolean littleEndian);
  unsigned short getUint16(unsigned long byteOffset, optional boolean littleEndian);
  long getInt32(unsigned long byteOffset, optional boolean littleEndian);
  unsigned long getUint32(unsigned long byteOffset, optional boolean littleEndian);
  float getFloat32(unsigned long byteOffset, optional boolean littleEndian);
  double getFloat64(unsigned long byteOffset, optional boolean littleEndian);
  void setInt8(unsigned long byteOffset, byte value);
  void setUint8(unsigned long byteOffset, octet value);
  void setInt16(unsigned long byteOffset, short value, optional boolean littleEndian);
  void setUint16(unsigned long byteOffset, unsigned short value, optional boolean littleEndian);
  void setInt32(unsigned long byteOffset, long value, optional boolean littleEndian);
  void setUint32(unsigned long byteOffset, unsigned long value, optional boolean littleEndian);
  void setFloat32(unsigned long byteOffset, float value, optional boolean littleEndian);
  void setFloat64(unsigned long byteOffset, double value, optional boolean littleEndian);
};
