/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[GenericParameter(T)]
callback interface ResolveFunction{
    void with(T value);
};

callback interface RejectFunction{
    void with(object value);
};

[GenericParameter(T)]
callback interface PromiseExecutor{
    void execute([GenericParameter(T)] ResolveFunction resolve, RejectFunction reject);
 };

callback PromiseRejectCallback = object (object value);

[GenericParameter(T)]
callback interface FullfilCallback{
    object fullfilled(T value);
};

[
    GenericParameter(T)
] interface Thenable {
    [GenericParameter(T)] Promise then([GenericParameter(T)] optional FullfilCallback fulfillCallback, optional PromiseRejectCallback rejectCallback);
};

[
   GlobalContext=Window&WorkerGlobalScope,
   CustomConstructor([GenericParameter(T)] PromiseExecutor executor),
   GenericParameter(T),
   GenericExtend(T)
] interface Promise: Thenable {
   [GenericParameter(T)] Promise catch(optional PromiseRejectCallback rejectCallback);
   [GenericParameter(U)] static Promise all([GenericParameter(? extends U)] Promise... promises);
   [GenericParameter(U)] static Promise race([GenericParameter(? extends U)] Promise... promises);
   [GenericParameter(U)] static Promise reject(object value);
   [GenericParameter(U)] static Promise resolve([GenericParameter(U)] Thenable  value);
};