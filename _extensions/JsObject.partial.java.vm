/*
* Copyright 2017 Abed Tony BenBrahim <tony.benrahim@10xdev.com>
*     and Gwt-JElement project contributors.
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not
* use this file except in compliance with the License. You may obtain a copy of
* the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations under
* the License.
*/
import Js;

partial class JsObject {
    @JsOverlay
    public final T get(String propertyName) {
        return Js.<T>get(this, propertyName);
    }

    @JsOverlay
    public final T get(double index) {
        return Js.<T>get(this, index);
    }
    #foreach($primitiveType in ${GWT_PRIMITIVE_TYPES})##

    @JsOverlay
    public final $primitiveType get${display.capitalize($primitiveType)}(String propertyName) {
        return Js.get${display.capitalize($primitiveType)}(this, propertyName);
    }

    @JsOverlay
    public final $primitiveType get${display.capitalize($primitiveType)}(double index) {
        return Js.get${display.capitalize($primitiveType)}(this, index);
    }
    #end

    @JsOverlay
    public final long getLong(String propertyName) {
        return Js.getLong(this, propertyName);
    }

    @JsOverlay
    public final long getLong(double index) {
        return Js.getLong(this, index);
    }

    @JsOverlay
    public final void set(String propertyName, T value) {
        Js.<T>set(this, propertyName, value);
    }

    @JsOverlay
    public final void set(double index, T value) {
        Js.<T>set(this, index, value);
    }
    #foreach($primitiveType in ${GWT_PRIMITIVE_TYPES})##

    @JsOverlay
    public final void set(String propertyName, $primitiveType value) {
        Js.<T>set(this, propertyName, value);
    }

    @JsOverlay
    public final void set(double index, $primitiveType value) {
        Js.<T>set(this, index, value);
    }
    #end

    @JsOverlay
    public final void set(String propertyName, long value) {
        Js.set(this, propertyName, (double) value);
    }

    @JsOverlay
    public final void set(double index, long value) {
        Js.set(this, index, (double) value);
    }

    @JsOverlay
    public final void delete(String propertyName) {
        Js.<T>delete(this, propertyName);
    }

    @JsOverlay
    public final void delete(double index) {
        Js.<T>delete(this, index);
    }

    @JsOverlay
    public final boolean has(String propertyName) {
        return Js.<T>has(this, propertyName);
    }

    @JsOverlay
    public final boolean has(double index) {
        return Js.<T>has(this, index);
    }

    @JsOverlay
    public final JsObject<T> with(String propertyName, T value) {
        return Js.<T>with(this, propertyName, value);
    }
    #foreach($primitiveType in ${GWT_PRIMITIVE_TYPES})##

    @JsOverlay
    public final JsObject<T> with(String propertyName, $primitiveType value) {
        return Js.<T>with(this, propertyName, value);
    }
    #end

    @JsOverlay
    public final JsObject<T> with(String propertyName, long value) {
        return Js.<T>with(this, propertyName, (double) value);
    }

    @JsOverlay
    public final boolean isEqualTo(Object object) {
        return Js.isEqual(this, object);
    }

    @JsOverlay
    public final boolean isStrictlyEqualTo(Object object) {
        return Js.isStrictlyEqual(this, object);
    }

}