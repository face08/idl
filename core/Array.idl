/*
 * Copyright 2017 Abed Tony BenBrahim <tony.benrahim@10xdev.com>
 *     and Gwt-JElement project contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

[GenericParameter(T,U)]
callback interface MapFunction{
    U map(T arg);
};

[
    GenericParameter(T)
] callback interface PredicateFunction{
    boolean test([GenericSub(T)] Object element, long index, [GenericParameter(T)] Array array); //REVISIT any
};

[
    GenericParameter(T)
] callback interface ArrayProc{
    void invoke([GenericSub(T)] any element, long index, [GenericParameter(T)] Array array); //REVISIT any
};

[
    GenericParameter(T, U)
]callback interface MappingFunction{
    [GenericSub(U)] any map([GenericSub(T)] any element, long index, Array array);
};

[
    GenericParameter(T, U)
] callback interface ReducingFunction{
    [GenericSub(U)] any reduce([GenericSub(U)] any accumulator, [GenericSub(T)] any currentValue, long currentIndex, [GenericParameter(T)] Array array);
};

[
    GenericParameter(T)
] callback interface CompareFunction{
    long compare([GenericSub(T)] any a, [GenericSub(T)] any b);
};

[
    GenericParameter(T)
]interface Array {
    readonly attribute long length;
    [GenericParameter(U)] static  Array from([GenericParameter(T)] ArrayLike arrayLike, [GenericParameter(T,U)] optional MapFunction mapFunction, optional Object thisArg);
    static boolean isArray(Object value);
    [GenericParameter(T)] static  Array of(Object... value);
    [GenericParameter(T)] Array concat( [GenericSub(T)] Object... value);
    [GenericParameter(T)] Array copyWithin(long target, optional long start, optional long end);
    //TODO entries
    boolean every([GenericParameter(T)] PredicateFunction callback, optional Object thisArg);
    Array fill([GenericSub(T)] Object value, optional long start, optional long end);
    Array filter([GenericParameter(T)] PredicateFunction predicate, optional Object thisArg);
    [GenericSub(T)] Object find([GenericParameter(T)] PredicateFunction predicate, optional Object thisArg);
    long findIndex([GenericParameter(T)] PredicateFunction predicate, optional Object thisArg);
    void forEach([GenericParameter(T)] ArrayProc callback, optional Object thisArg);
    boolean includes([GenericSub(T)] Object value, optional long fromIndex);
    long indexOf([GenericSub(T)] Object value, optional long fromIndex);
    String join(optional String separator);
    //TODO keys
    double lastIndexOf([GenericSub(T)] Object value, optional long fromIndex);
    [GenericParameter(U)]Array map([GenericParameter(T,U)] MappingFunction mappingFunction, optional Object thisArg);
    any pop();
    double push([GenericSub(T)] Object... value);
    [GenericSub(U)] any reduce([GenericParameter(T,U)]ReducingFunction reducingFunction, optional any initialValue);
    [GenericSub(U)] any reduceRight([GenericParameter(T,U)] ReducingFunction reducingFunction, optional any initialValue);
    Array reverse();
    any shift();
    Array slice(optional long start, optional long end);
    boolean some([GenericParameter(T)]PredicateFunction predicate, optional Object thisArg);
    Array sort([GenericParameter(T)] optional CompareFunction compareFunction);
    Array splice(long start, optional long end, [GenericSub(T)] Object... value);
    String toLocaleString(optional (String or sequence<String>) locales, optional LocaleOptions options);
    String toSource();
    String toString();
    long unshift([GenericSub(T)] Object... value);
    ValueIterator values();
    [GenericSub(T)] getter Object (long index);
    setter void (long index, [GenericSub(T)] Object value);
};

